' VART
' ====
' An open-source tool for drawing 640x400 vector art on the mega65

#output "vart"

' menu system
' +------+--------+-----+------+----------+---------+------+------+------+-----+
' ! line ! circle ! box ! poly ! (x) fill ! palette ! load ! save ! undo ! redo!
' +------+--------+-----+------+----------+---------+------+------+------+-----+
' x = exit
' ? = show/hide menu
' ctrl+1-8 = select from 1st 8 colours
' mega+1-8 = select from 2nd 8 colours
' ctrl+d = choose from default palette
' ctrl+a = choose from alternate palette

.declares
'--------
#declare key$
#declare k,a$
#declare x%, y%, w%, h%, x2%, y2%
#declare mx%, my%, mb%, mb_old%
#declare menu_selection = -1
#declare ret%
#declare selected_colour% = 1
#declare old_menu_selection% = -1

#declare line_state%, lx0%, ly0%
#declare circle_state%, cx0%, cy0%, radius%
#declare ellipse_state%, ex0%, ey0%, xradius%, yradius%
#declare box_state%, bx0%, by0%

#struct BUTTON x%, y%, w%, h%, type%, state%, text$

#define TYPE_NORMAL = 0
#define TYPE_TOGGLE = 1

#define LINE    = 0
#define CIRCLE  = 1
#define ELLIPSE = 2
#define BOX     = 3
#define FILL    = 4
#define EXIT    = 5

#define MAX_BTN = 6

BUTTON btns(MAX_BTN) = [     {x5F}
  [ 0,  0, 6, 3, TYPE_NORMAL, 0, "line" ],   {x5F}
  [ 6,  0, 8, 3, TYPE_NORMAL, 0, "circle" ], {x5F}
  [ 14, 0, 9, 3, TYPE_NORMAL, 0, "ellipse" ], {x5F}
  [ 23, 0, 5, 3, TYPE_NORMAL, 0, "box" ],    {x5F}
  [ 28, 0, 6, 3, TYPE_TOGGLE, 0, "fill" ],   {x5F}
  [ 34, 0, 6, 3, TYPE_NORMAL, 0, "exit" ]    {x5F}
] 

.main
'----
  gosub init   
  gosub draw_menu_system
  gosub check_input
  gosub ender
  end

.init
'----
  screen 0,640,400,4
  for k = 0 to 62
    read x%
    poke $0600+k, x%
  next k
  mouse on, 1
  sprite 0,1,1
  return

#define CHR_HEIGHT = 2
#define CHR_WIDTH = 1

#define CHR_DIR_UP = 1
#define CHR_DIR_RIGHT = 2
#define CHR_DIR_DOWN = 4
#define CHR_DIR_LEFT = 8

.clear_menu
'----------
  for k=0 to 7
    edma 3, 640*2, 0, $40000+k*$4000
  next k
  return

.draw_menu_system
'----------------
  gosub clear_menu
  pen 0,1

  ' draw items
  for k = 0 to MAX_BTN-1
    x%=btns_x%(k)
    y%=btns_y%(k)
    w%=(x% + btns_w%(k))
    h%=(y% + btns_h%(k))

    pen 0, 1
    if menu_selection=k and btns_type%(k) <> TYPE_TOGGLE then begin
      box x%*8, y%*8, w%*8, h%*8, 1
      pen 0, 0
    bend:else begin
      box x%*8, y%*8, w%*8, h%*8
      if btns_type%(k) = TYPE_TOGGLE and btns_state%(k)<>0 then begin
        pen 0,3
        box x%*8, y%*8, w%*8, h%*8, 1
        pen 0,0
      bend
    bend
    char x%+1, y%*8+4, CHR_HEIGHT, CHR_WIDTH, CHR_DIR_RIGHT, btns_text$(k)
    pen 0, 1
  next k

  pen 0,selected_colour% : sprite 0,1,selected_colour%
  return

.on_click_line
'-------------
  if line_state% = 0 then lx0%=mx%:ly0%=my%:line_state%=1:dot mx%,my%:return
  if line_state% = 1 then begin
    line lx0%, ly0%, mx%, my%
    line_state% = 0
  bend
  return

.on_click_circle
'---------------
  if circle_state% = 0 then cx0%=mx%:cy0%=my%:circle_state%=1:return
  if circle_state% = 1 then begin
    radius% = sqr( (mx%-cx0%)^2 + (my%-cy0%)^2 )
    circle cx0%, cy0%, radius%, btns_state%(FILL)
    circle_state% = 0
  bend
  return

.on_click_ellipse
'----------------
  if ellipse_state% = 0 then ex0%=mx%:ey0%=my%:ellipse_state%=1:return
  if ellipse_state% = 1 then begin
    xradius% = abs(mx%-ex0%)
    yradius% = abs(my%-ey0%)
    ellipse ex0%, ey0%, xradius%, yradius%, btns_state%(FILL)
    ellipse_state% = 0
  bend
  return

.on_click_box
'------------
  if box_state% = 0 then bx0%=mx%:by0%=my%:box_state%=1:return
  if box_state% = 1 then begin
    box bx0%, by0%, mx%, my%, btns_state%(FILL)
    box_state% = 0
  bend
  return

.on_click_fill
'-------------
  if btns_state%(FILL) = 0 then btns_state%(FILL)=1:else btns_state%(FILL)=0
  return

.check_action_click
'------------------
  if menu_selection = LINE then gosub on_click_line
  if menu_selection = CIRCLE then gosub on_click_circle
  if menu_selection = ELLIPSE then gosub on_click_ellipse
  if menu_selection = BOX then gosub on_click_box
  return

.check_colour_keypress
'---------------------
  if a$=chr$(144) then selected_colour% = 0
  if a$=chr$(5)   then selected_colour% = 1
  if a$=chr$(28)  then selected_colour% = 2
  if a$=chr$(159) then selected_colour% = 3
  if a$=chr$(156) then selected_colour% = 4
  if a$=chr$(30)  then selected_colour% = 5
  if a$=chr$(31)  then selected_colour% = 6
  if a$=chr$(158) then selected_colour% = 7
  if a$=chr$(129) then selected_colour% = 8
  if a$=chr$(149) then selected_colour% = 9
  if a$=chr$(150) then selected_colour% = 10
  if a$=chr$(151) then selected_colour% = 11
  if a$=chr$(152) then selected_colour% = 12
  if a$=chr$(153) then selected_colour% = 13
  if a$=chr$(154) then selected_colour% = 14
  if a$=chr$(155) then selected_colour% = 15

  pen 0,selected_colour% : sprite 0,1,selected_colour%
  return

.check_input
'-----------
  get a$
  if a$="x" then return
  gosub check_colour_keypress

  rmouse mx%, my%, mb%
  mx%=(mx%-24)*2
  my%=(my%-50)*2

  if mb%=128 and mb_old%=0 then begin
    mb_old%=128

    gosub check_button_hit
    
    if ret%=1 then begin
      if menu_selection = EXIT then screen close:end
    bend:else begin
      gosub check_action_click
    bend
  bend

  if mb_old%=128 and mb%=0 then mb_old% = 0

  'debug stuff
  'a$ = str$(mx%) + ", " + str$(my%) + ", " + str$(mb%)
  'pen 0, 0
  'box 0, 64, 150, 80, 1
  'pen 0, 1
  'char 0, 64, CHR_HEIGHT, CHR_WIDTH, CHR_DIR_RIGHT, a$

  goto check_input

.check_button_hit
'----------------
  ret%=0
  for k = 0 to MAX_BTN-1
    x%=btns_x%(k)*8
    y%=btns_y%(k)*8
    w%=btns_w%(k)*8
    h%=btns_h%(k)*8
    x2%=x%+w%
    y2%=y%+h%
    if x%<=mx% and mx%<=x2% and y%<=my% and my%<=y2% then begin
      old_menu_selection% = menu_selection
      menu_selection = k
      if menu_selection = FILL then begin
        gosub on_click_fill
        menu_selection = old_menu_selection%
      bend
      ret%=1
      gosub draw_menu_system
      k=MAX_BTN-1
    bend
  next k
  return
  
.ender
'-----
  screen close
  mouse off
  return

.data
'mouse pointer
data %11111111, %00000000, %00000000
data %11111110, %00000000, %00000000
data %11111100, %00000000, %00000000
data %11111000, %00000000, %00000000
data %11111100, %00000000, %00000000
data %11101110, %00000000, %00000000
data %11000111, %00000000, %00000000
data %10000011, %10000000, %00000000

data %00000001, %11000000, %00000000
data %00000000, %11100000, %00000000
data %00000000, %01110000, %00000000
data %00000000, %00111000, %00000000
data %00000000, %00011100, %00000000
data %00000000, %00001110, %00000000
data %00000000, %00000111, %00000000
data %00000000, %00000011, %10000000

data %00000000, %00000001, %00000000
data %00000000, %00000000, %00000000
data %00000000, %00000000, %00000000
data %00000000, %00000000, %00000000
data %00000000, %00000000, %00000000
ÿ